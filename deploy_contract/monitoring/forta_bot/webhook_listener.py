import asyncioimport loggingimport osimport shleximport subprocessfrom typing import Any, Dict, Listfrom fastapi import FastAPI, HTTPExceptionfrom pydantic import BaseModellogging.basicConfig(level=logging.INFO)LOG = logging.getLogger("forta-webhook")app = FastAPI()ALERT_ID = "AIRSHIP-VAULT-TRANSFER"DEFAULT_SCRIPT = "scripts/transfer_token_from_vault.py"ENV_AUTOSWEEP = "AIRSHIP_AUTOSWEEP_ENABLED"ENV_NETWORK = "AIRSHIP_AUTOSWEEP_NETWORK"ENV_SCRIPT = "AIRSHIP_AUTOSWEEP_SCRIPT"ENV_OWNER_ENV = "AIRSHIP_AUTOSWEEP_OWNER_ENV"class FindingMetadata(BaseModel):    tx_hash: str | None = None    token: str | None = None    to: str | None = None    value_raw: str | None = None    from_: str | None = None    class Config:        fields = {"from_": "from"}class Alert(BaseModel):    alertId: str    metadata: Dict[str, Any] | None = Noneclass FortaAlert(BaseModel):    alert: Alertdef _is_truthy(value: Any) -> bool:    if isinstance(value, bool):        return value    if isinstance(value, str):        return value.strip().lower() in {"true", "1", "y", "yes"}    return bool(value)def _build_command(metadata: FindingMetadata) -> List[str]:    script_path = os.environ.get(ENV_SCRIPT, DEFAULT_SCRIPT)    network = os.environ.get(ENV_NETWORK)    owner_env = os.environ.get(ENV_OWNER_ENV)    if not metadata.to or not metadata.token or not metadata.value_raw:        raise HTTPException(status_code=422, detail="Missing required metadata fields")    cmd = [        "brownie",        "run",        script_path,        "--vault_address",        metadata.to,        "--token_address",        metadata.token,        "--amount",        metadata.value_raw,        "--auto_confirm",        "True",    ]    if network:        cmd.extend(["--network", network])    if owner_env:        cmd.extend(["--owner_key_env", owner_env])    return cmdasync def _run_brownie(cmd: List[str]) -> Dict[str, Any]:    LOG.info("Executing: %s", " ".join(shlex.quote(part) for part in cmd))    process = await asyncio.create_subprocess_exec(        *cmd,        stdout=asyncio.subprocess.PIPE,        stderr=asyncio.subprocess.PIPE,    )    stdout, stderr = await process.communicate()    result = {        "returncode": process.returncode,        "stdout": stdout.decode("utf-8", errors="ignore"),        "stderr": stderr.decode("utf-8", errors="ignore"),    }    if process.returncode != 0:        LOG.error("Brownie command failed: %s", result["stderr"])    return result@app.post("/forta-alert")async def handle_forta_alert(payload: FortaAlert):    alert = payload.alert    if alert.alertId != ALERT_ID:        return {"status": "ignored", "reason": "unrelated alert"}    metadata = FindingMetadata.parse_obj(alert.metadata or {})    autosweep_enabled = _is_truthy(os.environ.get(ENV_AUTOSWEEP, "false"))    if not autosweep_enabled:        LOG.info("Received vault alert (autosweep disabled): %s", metadata.dict())        return {"status": "logged"}    cmd = _build_command(metadata)    result = await _run_brownie(cmd)    return {"status": "executed", "command": cmd, "result": result}